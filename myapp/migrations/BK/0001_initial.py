# Generated by Django 2.2.12 on 2020-05-29 07:30

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import myapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('profile', models.TextField(blank=True, null=True, verbose_name='紹介文')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', myapp.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_name', models.CharField(choices=[('var', 'バラエティ'), ('mus', '音楽'), ('news', 'ニュース'), ('edu', '教育'), ('info', '情報'), ('hob', '趣味')], max_length=4, null=True, unique=True, verbose_name='ジャンル')),
            ],
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='題名')),
                ('text', models.TextField(blank=True, null=True, verbose_name='お知らせ内容')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='番組名')),
                ('corner_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='コーナー名')),
                ('address', models.EmailField(blank=True, max_length=254, null=True, verbose_name='メールアドレス')),
                ('url', models.URLField(blank=True, null=True, verbose_name='公式Webページ')),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='作成時間')),
                ('published_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='更新時間')),
                ('okini_num', models.IntegerField(default=0, verbose_name='お気に入り')),
                ('genrelist', models.ManyToManyField(blank=True, related_name='genres', to='myapp.Genre', verbose_name='ジャンル')),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weeks', models.IntegerField(choices=[(1, '月'), (2, '火'), (3, '水'), (4, '木'), (5, '金'), (6, '土'), (7, '日')], null=True, unique=True, verbose_name='曜日')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('station_name', models.IntegerField(choices=[(0, '指定なし'), (1, 'TBSラジオ'), (2, 'ニッポン放送'), (3, '文化放送'), (4, 'NHK')], verbose_name='ラジオ局')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='開始時間')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='終了時間')),
                ('day_of_the_week', models.ManyToManyField(blank=True, related_name='day_of_the_weeks', to='myapp.Week', verbose_name='曜日')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stations', to='myapp.Program')),
            ],
        ),
        migrations.CreateModel(
            name='Okini',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('program', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='okini_program', to='myapp.Program')),
                ('user', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='okini_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Listener',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listener_name', models.CharField(max_length=100, verbose_name='主なハガキ職人')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listeners', to='myapp.Program')),
            ],
        ),
        migrations.CreateModel(
            name='Dj',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dj_name', models.CharField(max_length=100, verbose_name='出演者')),
                ('main_dj', models.BooleanField(verbose_name='メインパーソナリティ')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='djs', to='myapp.Program')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=200)),
                ('text', models.TextField()),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved_comment', models.BooleanField(default=False)),
                ('like_user', models.ManyToManyField(blank=True, related_name='like_users', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='myapp.Program')),
            ],
        ),
    ]
